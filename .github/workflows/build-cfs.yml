name: Build

# Run this workflow every time a new commit pushed to your repository
on: push

env:
  SIMULATION: native
  ENABLE_UNIT_TESTS: true

jobs:

  # Set the job key. The key is displayed as the job name
  # when a job name is not provided
  run-tests-deprecate-true:
    name: Build Executables and Run Tests

    strategy:
      matrix:
        buildtype: [debug, release]

    # Set the type of machine to run on
    runs-on: ubuntu-18.04
    env:
      OMIT_DEPRECATED: true
      BUILDTYPE: ${{ matrix.buildtype }}

    steps:
      # Checks out a copy of your repository on the ubuntu-latest machine
      - name: Checkout code
        uses: actions/checkout@v2
        with:
          submodules: true

      # Setup the build system
      - name: Copy Files
        run: |
          cp ./cfe/cmake/Makefile.sample Makefile
          cp -r ./cfe/cmake/sample_defs sample_defs

      # Setup the build system
      - name: Make Prep
        run: make prep

      - name: Make
        run: make

      - name: Install Dependencies
        run: sudo apt-get install lcov -y

      - name: Run Tests
        run: make test

      - name: Check Coverage
        run: make lcov

      - name: Make Install
        run: make install

      - name: Run cFS
        run: |
          ls ./build/exe/cpu1/
          cd ./build/exe/cpu1
          ./core-cpu1 > cFS_startup.txt &
          sleep 30
          ../host/cmdUtil --endian=LE --pktid=0x1806 --cmdcode=2 --half=0x0002

      - name: Check for cFS Warnings
        run: |
          ls
          if [[ -n $(grep -i "warn\|err\|fail" cFS_startup.txt) ]]; then
                  echo "Must resolve warn|err|fail in cFS startup before submitting a pull request"
                  echo ""
                  grep -i 'warn\|err\|fail' cFS_startup.txt
                  exit -1
          fi


  run-tests-deprecate-false:
      # Name the Job
      name: Build Executables and Run Tests using deprecated values
      strategy:
        matrix:
          buildtype: [debug, release]
      # Set the type of machine to run on
      runs-on: ubuntu-18.04
      env:
        OMIT_DEPRECATED: false
        BUILDTYPE: ${{ matrix.buildtype }}

      steps:
        # Checks out a copy of your repository on the ubuntu-latest machine
        - name: Checkout code
          uses: actions/checkout@v2
          with:
            submodules: true

        # Setup the build system
        - name: Copy Files
          run: |
            cp ./cfe/cmake/Makefile.sample Makefile
            cp -r ./cfe/cmake/sample_defs sample_defs

        # Setup the build system
        - name: Make Prep
          run: make prep

        - name: make
          run: make

        - name: Install Dependencies
          run: sudo apt-get install lcov -y

        - name: Run Tests
          run: make test

        - name: Check Coverage
          run: make lcov

        - name: Make Install
          run: make install

        - name: Run cFS
          run: |
            ls ./build/exe/cpu1/
            cd ./build/exe/cpu1
            ./core-cpu1 > cFS_startup.txt &
            sleep 30
            ../host/cmdUtil --endian=LE --pktid=0x1806 --cmdcode=2 --half=0x0002

        - name: Check for cFS Warnings
          run: |
            ls
            if [[ -n $(grep -i "warn\|err\|fail" cFS_startup.txt) ]]; then
                    echo "Must resolve warn|err|fail in cFS startup before submitting a pull request"
                    echo ""
                    grep -i 'warn\|err\|fail' cFS_startup.txt
                    exit -1
            fi



  build-docs:
    # Name the Job
    name: cFE Documentation
    # Set the type of machine to run on
    runs-on: ubuntu-18.04

    steps:
      # Checks out a copy of your repository on the ubuntu-latest machine
      - name: Checkout code
        uses: actions/checkout@v2
        with:
          submodules: true

      # Setup the build system
      - name: Copy Files
        run: |
          cp ./cfe/cmake/Makefile.sample Makefile
          cp -r ./cfe/cmake/sample_defs sample_defs

      # Setup the build system
      - name: Make Prep
        run: make prep

      - name: Install Dependencies
        run: sudo apt-get install lcov doxygen graphviz -y

      - name: Build Docs
        run: |
          make doc > make_doc_stdout.txt 2> make_doc_stderr.txt

      - name: Check ERRORS
        run: |
          if [[ -s make_doc_stderr.txt ]]; then
            echo "You must fix doxygen errors for \"doc\" before submitting a pull request"
            echo ""
            cat make_doc_stderr.txt
            exit -1
          fi

  build-usersguide:
    # Name the Job
    name: Users Guide
    # Set the type of machine to run on
    runs-on: ubuntu-18.04

    steps:
      # Checks out a copy of your repository on the ubuntu-latest machine
      - name: Checkout code
        uses: actions/checkout@v2
        with:
          submodules: true

      # Setup the build system
      - name: Copy Files
        run: |
          cp ./cfe/cmake/Makefile.sample Makefile
          cp -r ./cfe/cmake/sample_defs sample_defs

      # Setup the build system
      - name: Make Prep
        run: make prep

      - name: Install Dependencies
        run: sudo apt-get install lcov doxygen graphviz -y

      - name: Build Usersguide
        run: |
          make usersguide > make_usersguide_stdout.txt 2> make_usersguide_stderr.txt

      - name: Check Userguide ERRORS
        run: |
          if [[ -s make_usersguide_stderr.txt ]]; then
            echo "You must fix doxygen errors for \"usersguide\" before submitting a pull request"
            echo ""
            cat make_usersguide_stderr.txt
            exit -1
          fi

      - name: Check Userguide WARNINGS
        run: |
          if [[ -s build/doc/warnings.log ]]; then
            echo "You must fix doxygen warnings for \"usersguide\" before submitting a pull request"
            echo ""
            cat build/doc/warnings.log
            exit -1
          fi

  build-osalguide:
    # Name the Job
    name: Osal Guide
    # Set the type of machine to run on
    runs-on: ubuntu-18.04

    steps:
      # Checks out a copy of your repository on the ubuntu-latest machine
      - name: Checkout code
        uses: actions/checkout@v2
        with:
          submodules: true

      # Setup the build system
      - name: Copy Files
        run: |
          cp ./cfe/cmake/Makefile.sample Makefile
          cp -r ./cfe/cmake/sample_defs sample_defs

      # Setup the build system
      - name: Make Prep
        run: make prep

      - name: Install Dependencies
        run: sudo apt-get install lcov doxygen graphviz -y

      - name: Build OSAL Guide
        run: |
          make osalguide > make_osalguide_stdout.txt 2> make_osalguide_stderr.txt

      - name: Check OSAL Guide ERRORS
        run: |
          if [[ -s make_osalguide_stderr.txt ]]; then
            echo "You must fix doxygen errors for \"osalguide\" before submitting a pull request"
            echo ""
            cat make_osalguide_stderr.txt
            exit -1
          fi

      - name: Check OSAL Guide WARNINGS
        run: |
          if [[ -s build/doc/warnings.log ]]; then
            echo "You must fix doxygen warnings for \"osalguide\" before submitting a pull request"
            echo ""
            cat build/doc/warnings.log
            exit -1
          fi






#   make-tests:
#     runs-on: ubuntu-18.04
#     name: Make Tests
#     needs: build-exec
#     env:
#       ENABLE_UNIT_TESTS: true

#     steps:
#     - uses: actions/cache@v2
#       id: cache-build
#       with:
#         path: cFS/build
#         key: ${{ runner.os }}-${{ hashFiles('**/lockfiles') }}

#     - name: Make Tests
#       run: |
#         make install
#         make test

#   make-docs:
#     runs-on: ubuntu-18.04
#     name: Make Docs
#     needs: build-exec

#     steps:
#     - uses: actions/cache@v2
#       id: cache-build
#       with:
#         path: cFS/build
#         key: ${{ runner.os }}-${{ hashFiles('**/lockfiles') }}

#     - name: Doxygen Setup
#       run: |
#         apt-get install doxygen -y
#         apt-get install graphviz -y

#     - name: Make Docs
#       run: make doc
